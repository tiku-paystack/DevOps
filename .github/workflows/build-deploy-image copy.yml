name: Build and Deploy main image

on:
	push:
		branches:
			- dev

on:
  pull_request:
    branches: [main]

env:
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_FEED_DEPLOY_WEBHOOK_URL }}

jobs:
  build-and-push:
    runs-on: staging-cluster-core-optimization-runner
    steps:
    - uses: act10ns/slack@v1
      with:
        status: starting
        channel: '#feed-eng-deploys'
      if: always()

    - uses: actions/checkout@v2
      id: checkout
      with:
        fetch-depth: 0

    - name: Extract application version
      id: gitversion
      shell: bash
      run: echo "##[set-output name=assemblySemVer;]$(echo ${GITHUB_REF#refs/heads/}-${GITHUB_SHA:0:8} | tr -sc '[:alnum:]\n-' _)"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: eu-west-2
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set image version and save image tag
      run: |
        echo "VERSIONED_IMAGE=${{ steps.login-ecr.outputs.registry }}/paystack-core-banking:${{ steps.gitversion.outputs.assemblySemVer }}" >> $GITHUB_ENV 
        echo "${{ steps.gitversion.outputs.assemblySemVer }}" >> version.txt 

    - name: Upload versioned_image artifact
      uses: actions/upload-artifact@v2
      with:
        name: image-tag
        path: version.txt

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      id: cache-docker
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: core-banking-${{ hashFiles('Dockerfile') }}-${{ hashFiles('package.json') }}-${{ env.GITHUB_REF }}
        restore-keys: |
          core-banking-${{ hashFiles('Dockerfile') }}-${{ hashFiles('package.json') }}-
          core-banking-${{ hashFiles('Dockerfile') }}-
      continue-on-error: true
      timeout-minutes: 1

    - name: Build Image
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        builder: ${{ steps.buildx.outputs.name }}
        context: .
        tags: ${{ env.VERSIONED_IMAGE }}
        push: true
        load: false
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
        build-args: |
            PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }}

    - uses: act10ns/slack@v1
      with:
        status: ${{ job.status }}
        steps: ${{ toJson(steps) }}
        channel: '#feed-eng-deploys'
      if: always()

  deploy_app:
    needs: build-and-push
    runs-on: staging-cluster-core-optimization-runner
    steps:
      - uses: act10ns/slack@v1
        with:
          status: starting
          channel: '#feed-eng-deploys'
        if: always()

      - uses: actions/checkout@v2
        id: checkout
        with:
          fetch-depth: 0

      - uses: actions/checkout@v2
        id: checkout-kube-helm-deployments
        with:
          fetch-depth: 0
          repository: 'PaystackHQ/kube-helm-deployments'
          ref: 'master'
          token: ${{ secrets.INFRA_COMMON_REPO_TOKEN }}
          path: 'helm-files'

      - name: Turnstyle
        uses: softprops/turnstyle@v1
        with:
          continue-after-seconds: 1200
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup helmfile
        uses: mamezou-tech/setup-helmfile@v0.7.0

      - name: Install Helm plugins
        run: |
          helm plugin install https://github.com/jkroepke/helm-secrets --version v3.5.0
          helm plugin install https://github.com/databus23/helm-diff --version v3.1.3

      - name: Sops Binary Installer
        uses: mdgreenwald/mozilla-sops-action@v1
        with:
          version: 'v3.6.1'

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: image-tag

      - name: Set image tag env var
        run: |
          echo "IMAGE_TAG=$(cat version.txt)" >> $GITHUB_ENV

      - name: Deploy to kubernetes cluster
        run: |
          cd helm-files/staging/core-optimizations/core-banking
          helmfile apply
        env:
          HELM_INCUBATOR_URL: ${{ secrets.HELM_INCUBATOR_URL }}
          HELM_INCUBATOR_USER: ${{ secrets.HELM_INCUBATOR_USER }}
          HELM_INCUBATOR_PASSWORD: ${{ secrets.HELM_INCUBATOR_PASSWORD }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}

      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#feed-eng-deploys'
        if: always()
